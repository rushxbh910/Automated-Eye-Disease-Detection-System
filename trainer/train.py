# -*- coding: utf-8 -*-
"""Code_formated.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ze3raQLY1pps9t4EZcAU_7WVo4gy1blf
"""

from chi import server, context, lease
import chi, os, time, datetime

context.version = "1.0"
context.choose_project()
context.choose_site(default="CHI@TACC")

l = lease.get_lease("Project24001")
l.show()

username = os.getenv('USER') # all exp resources will have this prefix
s = server.Server(
    f"node-sb9880-01",
    reservation_id=l.node_reservations[0]["id"],
    image_name="CC-Ubuntu24.04-CUDA"
)
s.submit(idempotent=True)

# Associate a floating IP to make the server accessible from the internet
s.associate_floating_ip()

# Refresh server info and verify connectivity
s.refresh()
s.check_connectivity()

# Define security groups for required services
security_groups = [
  {'name': "allow-ssh", 'port': 22, 'description': "Enable SSH traffic on TCP port 22"},
  {'name': "allow-8888", 'port': 8888, 'description': "Enable TCP port 8888 (used by Jupyter)"},
  {'name': "allow-8000", 'port': 8000, 'description': "Enable TCP port 8000 (used by MLFlow)"},
  {'name': "allow-9000", 'port': 9000, 'description': "Enable TCP port 9000 (used by MinIO API)"},
  {'name': "allow-9001", 'port': 9001, 'description': "Enable TCP port 9001 (used by MinIO Web UI)"}
]

# Configure openstacksdk for actions unsupported by python-chi
os_conn = chi.clients.connection()
nova_server = chi.nova().servers.get(s.id)

for sg in security_groups:
  # Create security group if it doesn't exist
  if not os_conn.get_security_group(sg['name']):
      os_conn.create_security_group(sg['name'], sg['description'])
      os_conn.create_security_group_rule(sg['name'], port_range_min=sg['port'], port_range_max=sg['port'],
                                         protocol='tcp', remote_ip_prefix='0.0.0.0/0')
  # Add security group to server
  nova_server.add_security_group(sg['name'])

print(f"Updated security groups: {[group.name for group in nova_server.list_security_group()]}")

# Install Docker using the official installation script
s.execute("curl -sSL https://get.docker.com/ | sudo sh")

# Add current user to docker group to run docker without sudo
s.execute("sudo groupadd -f docker; sudo usermod -aG docker $USER")

# Install AMD GPU driver using amdgpu-install
s.execute("sudo apt update; wget https://repo.radeon.com/amdgpu-install/6.3.3/ubuntu/noble/amdgpu-install_6.3.60303-1_all.deb")
s.execute("sudo apt -y install ./amdgpu-install_6.3.60303-1_all.deb; sudo apt update")
s.execute("amdgpu-install -y --usecase=dkms")

# Install rocm-smi for GPU monitoring
s.execute("sudo apt -y install rocm-smi")

# Add user to video and render groups for GPU access
s.execute("sudo usermod -aG video,render $USER")

# Reboot to apply changes
s.execute("sudo reboot")
time.sleep(30)  # Wait for server to come back online

# Verify connectivity after reboot
s.refresh()
s.check_connectivity()

# Verify AMD GPU is working
s.execute("rocm-smi")

# Install nvtop with AMD GPU support
s.execute("sudo apt -y install cmake libncurses-dev libsystemd-dev libudev-dev libdrm-dev libgtest-dev")
s.execute("git clone https://github.com/Syllo/nvtop")
s.execute("mkdir -p nvtop/build && cd nvtop/build && cmake .. -DAMDGPU_SUPPORT=ON && sudo make install")

# Clone repository with Dockerfile and configuration
s.execute("git clone --recurse-submodules https://github.com/rushxbh910/Automated-Eye-Disease-Detection-System.git")

# Build the Docker image
s.execute("docker build -t jupyter-mlflow -f Automated-Eye-Disease-Detection-System/docker/Dockerfile.jupyter-torch-mlflow-cuda .")

# First, make sure the directory exists
s.execute("mkdir -p ~/.config/rclone")

# Create the configuration file directly using echo and redirection
s.execute('''cat > ~/.config/rclone/rclone.conf << 'EOL'
[chi_tacc]
type = swift
user_id = e2577330508e3973cfe043571304aac84303c56c5f6e3388146f5a29a70065c7
application_credential_id = ec481a935673452a9fc7a565564830d9
application_credential_secret = TaLTF-J24JePMabTxzrAw4H0RaTM6rDDEw9PSh3PF2Ao4VxynLFPp8z7PtV8GyFX5XehqnCsBQEyHE7RJKgvyQ
auth = https://chi.tacc.chameleoncloud.org:5000/v3
region = CHI@TACC
EOL''')

# Test the configuration
s.execute("rclone lsd chi_tacc:")

s.execute("rclone lsd chi_tacc:")

s.execute("sudo mkdir -p /mnt/object")
s.execute("sudo chown -R cc /mnt/object")
s.execute("sudo chgrp -R cc /mnt/object")
s.execute("rclone mount chi_tacc:object-persist-project24 /mnt/object --read-only --allow-other --daemon")
s.execute("ls /mnt/object")

s.execute("docker volume create EYE")

s.execute("""export HOST_IP=$(curl --silent http://169.254.169.254/latest/meta-data/public-ipv4) &&
          docker compose -f Automated-Eye-Disease-Detection-System/docker/docker-compose-ray-mlflow-data.yaml up -d""")

s.execute("docker run --rm -it -v EYE:/mnt alpine ls -l /mnt/")

s.execute('''HOST_IP=$(curl --silent http://169.254.169.254/latest/meta-data/public-ipv4 )
docker run -d --rm -p 8888:8888 \
    -v ~/workspace:/home/jovyan/work/ \
    -v EYE:/mnt/ \
    -e RAY_ADDRESS=http://${HOST_IP}:8265/ \
    -e MLFLOW_TRACKING_URI=http://${HOST_IP}:8000/ \
    -e EYE_DATA_DIR=/mnt/data/transformed_eye_dataset \
    --name jupyter \
    jupyter-ray''')

# Only run this when you're done with the object storage
fusermount -u /mnt/object
